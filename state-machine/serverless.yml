# To access resources defined in Terraform, we use SSM
# https://www.serverless.com/blog/definitive-guide-terraform-serverless/
#
# For full config options, check the docs:
#  - docs.serverless.com
#  - https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/serverless.yml.md
#

service: mentorpal-upload-sm

# pin to only deploy with a specific Serverless version
frameworkVersion: '2'

variablesResolutionMode: 20210326

# todo install drugin build:
# sls plugin install -n serverless-deployment-bucket
# sls plugin install -n serverless-offline
# sls plugin install -n serverless-layers

plugins:
  - serverless-deployment-bucket
  - serverless-offline
  - serverless-layers
custom:
  stages:
    offline:
      LOG_LEVEL: 'trace'
      S3_STATIC_ARN: arn:aws:s3:::static-mentorpal-offline-origin
    dev:
      LOG_LEVEL: 'trace'
      # v2 is hardcoded, we could use fallback stages instead
      S3_STATIC_ARN: ${ssm:/mentorpal/v2/s3_static_arn}
    qa:
      # TODO
      # S3_STATIC_ARN: ${ssm:/mentorpal/${self:provider.stage}/s3_static_arn}
      LOG_LEVEL: 'debug'
    prod:
      LOG_LEVEL: 'info'
      # TODO
      # S3_STATIC_ARN: ${ssm:/mentorpal/${self:provider.stage}/s3_static_arn}

  # serverless-layers requires a deployment bucket to be created before deploying this stack
  serverless-layers:
    - dependencies:
        layersDeploymentBucket: ${self:provider.deploymentBucket.name}
        dependenciesPath: ./requirements.txt
        compatibleRuntimes:
          - python3.7
          - python3.8
        # applies to all lambdas

  # serverless-offline:
  #   useDocker: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'} # stage is dev unless otherwise specified with --stage flag
  deploymentBucket:
    name: '${self:service}-sls-deploy-${self:provider.stage}'
    blockPublicAccess: true
    serverSideEncryption: AES256
    versioning: false
  stackTags:
    ENVIRONMENT: ${self:provider.stage}
    PROJECT: ${self:service}-${self:provider.stage}
    REPOSITORY: mentor-upload
  runtime: python3.8
  lambdaHashingVersion: 20201221
  tracing:
    lambda: true
  logRetentionInDays: 30      
  region: us-east-1
  architecture: x86_64 # because of the static ffmpeg binaries and python dependencies
  environment:
    # IS_OFFLINE: ${env:IS_OFFLINE}
    STAGE: ${self:provider.stage}
    PYTHON_ENV: ${self:provider.stage}
    S3_STATIC_ARN: ${self:custom.stages.${self:provider.stage}.S3_STATIC_ARN}
    FFMPEG_EXECUTABLE: /opt/ffmpeg/ffmpeg
    TRANSCRIBE_MODULE_PATH: transcribe_aws
    TRANSCRIBE_AWS_REGION: ${self:provider.region}
    TRANSCRIBE_AWS_S3_BUCKET_SOURCE: mentorpal-v2-mentorpal-transcribe-uploads
    TRANSCRIBE_AWS_SECRET_ACCESS_KEY: 'TODO SSM'
    TRANSCRIBE_AWS_ACCESS_KEY_ID: 'TODO SSM'

  # iam permissions for all lambda functions
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - "/"
              - - ${self:custom.stages.${self:provider.stage}.S3_STATIC_ARN}
                - "*"
package:
#  individually: false
 patterns:
    # exclude everything:
     - '!./**'
    # and then add back in only the files we need:
     - '*.py'

layers:
  # binaries are shared and this will make lambdas size smaller
  binaries:
    path: ./binaries
    package:
      patterns:
        - '!./**'
        # relative to layer path:
        # when attached, these are available under /opt
        - ./ffmpeg/ffmpeg
        - './MediaInfo_DLL_21.09_Lambda/lib/**'
    name: binaries-layer-${self:provider.stage}
    description: Bundles ffmpeg and mediainfo binaries/libs
    compatibleArchitectures: # optional, a list of architectures this layer is compatible with
      - x86_64
    licenseInfo: GPLv3 # optional, a string specifying license information
    retain: false # If true, layer versions are not deleted as new ones are created

functions:
  step-trim:
    handler: answer.handler
    memorySize: 2048 # todo benchmark to find the optimal size
    timeout: 300
    layers:
      # binaries gets named "Binaries"+"LambdaLayer":
      # see https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
      - { Ref: BinariesLambdaLayer }
